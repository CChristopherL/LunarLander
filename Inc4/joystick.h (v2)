#ifndef JOYSTICK_H
#define JOYSTICK_H

#include <stdint.h>
#include <stdio.h>

// Structure to store calibration data for the joystick
typedef struct {
    int16_t x_min;   // Minimum X value
    int16_t x_max;   // Maximum X value
    int16_t y_min;   // Minimum Y value
    int16_t y_max;   // Maximum Y value
    int16_t center_x; // Center X value (calibrated)
    int16_t center_y; // Center Y value (calibrated)
} JoystickCalibration;

// Enumeration for identifying joystick pins
typedef enum {
    PA0, // Joystick pin connected to PA0
    PA1  // Joystick pin connected to PA1
} JoystickPin;

// Function prototypes for initializing and configuring joystick hardware
void initPins(void); // Initialize GPIO pins for joystick
void initADC(void);  // Initialize ADC for analog input
void calibrateJoystick(JoystickCalibration *calibration); // Calibrate joystick center and range

// Function prototypes for reading and processing joystick data
void analogReadJoystick(uint16_t *pa0_value, uint16_t *pa1_value); // Read raw analog values
int16_t joystickAdjust(uint16_t raw_value, JoystickPin pin, const JoystickCalibration *calibration); // Adjust raw value based on calibration
uint8_t readJoystickAnalog(int16_t pa0_adjusted, int16_t pa1_adjusted, int16_t hysteresis); // Get digital joystick state
void updateBuffer(int16_t *buffer, int16_t new_value, int buffer_size); // Update buffer with new value
int16_t calculateAverage(int16_t *buffer, int buffer_size); // Calculate average of buffer values

// Function prototypes for handling button inputs
void initButtons(void); // Initialize buttons
int readButton1(void);  // Read status of button 1
int readButton2(void);  // Read status of button 2

#endif // JOYSTICK_H
